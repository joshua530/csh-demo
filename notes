Model - encapsulates data and logic related to data
PageModel - encapsulates data and logic related to the corresponding razor page. It separates
the logic of the page from the presentation

Pages/Shared - contains markup elements that are shared across multiple razor pages

-> Layout - cshtml file that defines top level template for views. Provide common layout for
consistent user experience. Typically contains header, footer, nav bar ...
-> Partial view - cshtml file that renders HTML output within another file's rendered
output. Typically used to break large markup files into smaller components
-> layouts and partial views are contained in the Pages/Shared folder

The directory structure within the Pages directory is used as the routing mechanism by
default
eg http://abc.com/one will route to Pages/One/Index.cshtml or Pages/One.cshtml
   http://abc.com/ will route to Pages/Index.cshtml

 Razor pages
--------------
@page - indicates that the template is a razor page(must be the first directive in a razor page)
@model - the model that contains the razor page's logic
Any first word preceded by @ indicates a razor page directive
@{<some code>} - the code in between the angle brackets is c# code
if @ is not followed by a razor template keyword, then the code after it will be interpreted as c# code
eg @person.Name will be rendered out as a person object's Name property
the curly braces are added to give the ability to span c# code across multiple lines
@section <section name> {<partial name="<partial script>">}
<partial name="<partial script>"> - renders a partial script. Is a substitute for
@{await Html.RenderPartialAsync("<partial script>");}

2.22m = (decimal)2.22
2.22d = (double)2.22
2.22f = (float)2.22
